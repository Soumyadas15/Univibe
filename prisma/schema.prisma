datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int      @id @default(autoincrement())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  institute       String?
  hashedPassword  String?
  isVerified      Boolean? @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isAdmin         Boolean? @default(false)

  accounts        Account[]
  events          Event[]
  registrations   Registration[]
  tokens          Token[]
  favoriteEvents  FavoriteEvent[]
  tickets        Ticket[]
  clickLogs ClickLog[]
}

model Event {
  id              Int      @id @default(autoincrement())
  title           String
  description     String?  @db.Text
  imageSrc        String?
  createdAt       DateTime @default(now())
  category        String?
  department      String?
  date            DateTime @default(now())
  venue           String?
  college         String?
  team            Boolean? @default(false)
  lat             Float?
  long            Float?
  memberCount     Int?
  paidEvent       Boolean?  @default(false)
  price           Int?
  cancellable     Boolean? @default(false)

  userId          Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  registrations   Registration[]
  likedByUsers    FavoriteEvent[]
  tickets        Ticket[]
  clickLogs ClickLog[]
}

model Token {
  id              Int      @id @default(autoincrement())
  userId          Int
  activationCode  String?
  activatedAt     DateTime?
  expired         Boolean? @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                Int    @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Registration {
  id              Int      @id @default(autoincrement())
  userId          Int
  eventId         Int  
  phone           String
  semester        String
  department      String?
  member1         String?
  member2         String?
  member3         String?
  member4         String?
  hasPaid         Boolean? @default(false)
  createdAt       DateTime @default(now())

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event           Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
model FavoriteEvent {
  userId  Int
  eventId Int
  createdAt DateTime @default(now())

  user    User @relation(fields: [userId], references: [id])
  event   Event @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
}

model Ticket {
  id             Int      @id @default(autoincrement())
  userId         Int
  eventId        Int
  ticketNumber   String?
  issuedAt       DateTime @default(now())
  validTill      DateTime?
  isUsed         Boolean?  @default(false)
  phone          String?
  semester       String?
  name           String?
  member1        String?
  member2        String?
  member3        String?

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event          Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}


//Logs clicks

model ClickLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  clickedAt DateTime @default(now())

  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}
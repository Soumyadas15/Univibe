// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  institute       String?
  hashedPassword  String?
  isVerified      Boolean? @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  favoriteIds     String[] @db.ObjectId

  accounts Account[]
  events Event[]
  registrations Registration[]
  tokens Token[]
}

model Token {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  activationCode  String?
  activatedAt DateTime?
  expired Boolean? @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Event {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  imageSrc String?
  createdAt DateTime @default(now())
  category  String?
  department String?
  date      DateTime? @default(now())
  venue     String?
  college   String?
  likedBy     String[] @db.ObjectId
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  registrations Registration[]
}

model Registration {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  eventId String @db.ObjectId  
  phone   BigInt
  semester String
  member1 String?
  member2 String?
  member3 String?
  member4 String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}